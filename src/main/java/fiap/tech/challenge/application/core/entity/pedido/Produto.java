package fiap.tech.challenge.application.core.entity.pedido;

import fiap.tech.challenge.application.adapter.outbound.repository.pedido.ProdutoDto;
import fiap.tech.challenge.application.core.enums.Categoria;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.Size;
import lombok.*;

import java.math.BigDecimal;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
//@DynamoDBTable(tableName = "Produtos")
@EqualsAndHashCode(of = "idProduto")
public class Produto {
    // @DynamoDBHashKey(attributeName = "idProduto")
    // @DynamoDBAutoGeneratedKey
    @Schema(description = "Id do produto após ser criado", example = "1", required = true)
    private String idProduto;

    @NotNull
    @Enumerated(EnumType.STRING)
    //  @DynamoDBAttribute(attributeName = "categoria")
    @Schema(implementation = Categoria.class, description = "Categoria do produto", example = "LANCHE", required = true)
    private Categoria categoria;

    @NotBlank
    @Size(max = 30)
    //   @DynamoDBAttribute(attributeName = "nome")
    @Schema(description = "Nome do produto", example = "X-Salada", required = true, maxLength = 30)
    private String nome;

    @NotBlank
    @Size(max = 200)
    //   @DynamoDBAttribute(attributeName = "descricao")
    @Schema(description = "Descrição do produto",
            example = "pão, 2 queijo,presunto, bacon, ovo,tomate e batata.",
            required = true,
            maxLength = 200)
    private String descricao;

    @NotNull
    @Positive
    //  @DynamoDBAttribute(attributeName = "preco")
    @Schema(description = "Preço do produto", example = "29.99", required = true)
    private BigDecimal preco;

    // @DynamoDBAttribute(attributeName = "tempoPreparo")
    @Schema(description = "Tempo em minutos necessário para preparar todo o produto.", example = "20")
    private int tempoPreparo;

    @Size(max = 400)
    //  @DynamoDBAttribute(attributeName = "imagem")
    @Schema(description = "Caminho onde a imagem se encontra disponibilizada",
            example = "https://img.freepik.com/fotos-gratis/hamburguer-grelhado-e-batatas-fritas-ia-geradora-de-alimentos_188544-8516.jpg?w=1380&t=st=1714943055~exp=1714943655~hmac=ece51b7d51f3347359b4d5075c5ab900004f9a463d3e943291803f32deffa910",
            maxLength = 400)
    private String imagem;

    @Getter
//@DynamoDBAttribute(attributeName = "possuiPedido")
    @Schema(description = "Indica se o produto possuí algum pedido vinculado a ele", example = "0", required = true)
    private boolean possuiPedido;

    public void registrar(ProdutoDto produto) {
        validaCategoria(produto.categoria());
        validaNome(produto.nome());
        validaDescricao(produto.descricao());
        validaPreco(produto.preco());

        //verificar se é necessario
        validaTempoPreparo(produto.tempoPreparo());
        validaImagem(produto.imagem());
    }

    private void validaCategoria(Categoria categoria) {
        if (categoria != null) {
            this.categoria = categoria;
        }
    }

    private void validaNome(String nome) {
        if (nome != null) {
            this.nome = nome;
        }
    }

    private void validaDescricao(String descricao) {
        if (descricao != null) {
            this.descricao = descricao;
        }
    }

    private void validaPreco(BigDecimal preco) {
        if (preco != null) {
            this.preco = preco;
        }
    }

    private void validaTempoPreparo(int tempoPreparo) {
        if (tempoPreparo > 0) {
            this.tempoPreparo = tempoPreparo;
        }
    }

    private void validaImagem(String imagem) {
        if (imagem != null) {
            this.imagem = imagem;
        }
    }

}
